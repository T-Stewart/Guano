const app = require('../server');
const debug = require('debug');
const http = require('http');
const mongoose = require('mongoose');
const { normalize } = require('path');

/**
 * Get port from environment and store in Express.
 */

const PORT = normalizePort(process.env.PORT || 8080)
app.set('port', PORT)

/**
 * Connect to MongoDB
 **/


const mongoDbUrl = process.env.MONGODB_URL || 'mongodb://localhost/guanoposts'
mongoose.connect(mongoDbUrl, {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

if (process.env.NODE_ENV === 'production') {
  app.use(express.static('../../front-end/build'));
}
/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(PORT, console.log(`Server is starting at ${PORT}`));
server.on('error',onError);
server.on('listening on PORT 8080', onListening);

/**
 * Normalize a port into a number, string, or false.
 */


function normalizePort(val) {
    let port = parseInt(val, 10);

    if(isNaN(port)) {
        // named pipe
        return val
    }

    if(port >= 0) {
        // port number
        return port
    }

    return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error
    }

    let bind =typeof port === 'string'
    ? 'Pipe ' + port
    : 'Pipe ' + port;


  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

  /**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
